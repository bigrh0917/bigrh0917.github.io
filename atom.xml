<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        
        <title>limanshu</title>
        <description>A hugo</description>
        <link>https://bigrh0917.github.io/</link>
        
        <language>en</language>
        <copyright>Copyright 2025, Calvin Tran</copyright>
        <lastBuildDate>Sun, 16 Mar 2025 00:00:00 +0000</lastBuildDate>
        <generator>Hugo - gohugo.io</generator>
        <docs>http://cyber.harvard.edu/rss/rss.html</docs>
        <atom:link href="https://bigrh0917.github.io//atom.xml" rel="self" type="application/atom+xml"/>
        
        
        <item>
            <title>MovieCatalog-Manage Local Movies</title>
            <link>https://bigrh0917.github.io/posts/moviecatalog/</link>
            <description>&lt;p&gt;&lt;strong&gt;项目特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;基于 Python，Tkinter，SQLite，PyInstaller 实现电影管理与双人评分系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;易于安装和使用，适合非技术用户&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;独立可执行文件无需安装Python环境&lt;/li&gt;
&lt;li&gt;简洁直观的界面设计&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;自动扫描功能减少了手动整理电影的工作量&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;访问与参考&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码仓库：&lt;a href=&#34;https://github.com/bigrh0917/MovieCatalog&#34;&gt;bigrh0917/MovieCatalog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;更一步详细内容&#34;&gt;更一步详细内容&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;业务场景：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在数字媒体时代，个人电影和电视剧收藏日益增长，管理这些媒体资源变得越来越具有挑战性。许多电影爱好者面临以下问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电影文件散布在不同文件夹，难以统一管理&lt;/li&gt;
&lt;li&gt;缺乏有效的方式记录已观看的电影和个人评分&lt;/li&gt;
&lt;li&gt;当多人共享媒体库时，难以追踪每个人的观影状态和评价&lt;/li&gt;
&lt;li&gt;手动整理和更新电影信息耗时费力&lt;/li&gt;
&lt;li&gt;找到特定电影或根据评分筛选电影变得困难&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些问题导致媒体资源管理效率低下，影响了用户的观影体验和媒体资源的利用率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;具体功能：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个直观的用户界面，方便用户管理电影收藏&lt;/li&gt;
&lt;li&gt;实现电影条目的添加、编辑和删除功能&lt;/li&gt;
&lt;li&gt;设计双人评分系统，支持两位用户（李和彭）分别对电影进行评分&lt;/li&gt;
&lt;li&gt;开发观看状态记录功能，跟踪每位用户的观影情况&lt;/li&gt;
&lt;li&gt;实现自动扫描功能，减少手动添加电影的工作量&lt;/li&gt;
&lt;li&gt;提供多种排序方式，便于用户快速找到所需电影&lt;/li&gt;
&lt;li&gt;确保系统易于安装和使用，适合非技术用户&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;技术选择：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;开发语言&lt;/strong&gt;：选择Python作为主要开发语言，利用其跨平台特性和丰富的库资源&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户界面&lt;/strong&gt;：使用Tkinter库构建图形用户界面，确保界面简洁直观&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数据存储&lt;/strong&gt;：采用SQLite数据库存储电影信息，兼顾性能和易用性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;打包工具&lt;/strong&gt;：使用PyInstaller将应用打包为独立可执行文件，方便非技术用户使用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;开发实施&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据库设计&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计电影表结构，包含ID、名称、文件名、两位用户的评分和观看状态等字段&lt;/li&gt;
&lt;li&gt;实现数据库连接和基本CRUD操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;核心功能实现&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发电影条目管理功能（添加、编辑、删除）&lt;/li&gt;
&lt;li&gt;实现双人评分系统，支持0-10分的评分范围&lt;/li&gt;
&lt;li&gt;开发观看状态记录功能，使用复选框表示是否观看&lt;/li&gt;
&lt;li&gt;实现自动扫描功能，自动识别movie文件夹中的新电影文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;用户界面开发&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计主界面，显示电影列表和操作按钮&lt;/li&gt;
&lt;li&gt;开发编辑窗口，支持修改电影详细信息&lt;/li&gt;
&lt;li&gt;实现排序功能，支持按名称和评分排序&lt;/li&gt;
&lt;li&gt;添加快速访问功能，双击条目可编辑详情，直接打开电影文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;应用打包&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用PyInstaller将应用打包为独立可执行文件&lt;/li&gt;
&lt;li&gt;创建安装指南和使用说明文档&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;可能有用的参考资料&#34;&gt;可能有用的参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IDE&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.trae.ai/&#34;&gt;Trae - Ship Faster with Trae&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PyInstaller&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pyinstaller.org/en/stable/&#34;&gt;PyInstaller Manual — PyInstaller 6.12.0 documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQLite&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sqlite.org/index.html&#34;&gt;SQLite Home Page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;附件&#34;&gt;附件&lt;/h2&gt;
</description>
            <author>author</author>
            <guid>https://bigrh0917.github.io/posts/moviecatalog/</guid>
            <pubDate>Sun, 16 Mar 2025 00:00:00 +0000</pubDate>
        </item>
        
        <item>
            <title>Build a Blog with Hugo and GitHub Pages</title>
            <link>https://bigrh0917.github.io/posts/bulit-blog-by-hugo-and-gitpage/</link>
            <description>&lt;p&gt;&lt;strong&gt;项目特点&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该项目并非简单的博客搭建，而是以&lt;strong&gt;生产级 SaaS 标准&lt;/strong&gt;设计的系统&lt;/li&gt;
&lt;li&gt;通过 Hugo 的模块化架构实现内容与样式解耦，结合 GitHub Actions 的精细化工作流控制，使发布效率提升 20 %&lt;/li&gt;
&lt;li&gt;引入边缘计算和安全防护能力，使博客在零服务器成本下达到金融级可用性（SLA 99.99%）&lt;/li&gt;
&lt;li&gt;这套架构具备横向扩展能力，稍加改造即可支撑企业级文档站点的需求&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;项目成果&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全球平均加载时间（FCP）: &lt;strong&gt;0.164s&lt;/strong&gt;（WebPageTest 测试，基于 4G 网络）&lt;/li&gt;
&lt;li&gt;Lighthouse 综合评分: &lt;strong&gt;98/100&lt;/strong&gt;（桌面设备）&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;部署耗时降至 &lt;strong&gt;25 秒全自动化&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;通过 GitHub Actions 矩阵策略，实现 &lt;strong&gt;多版本 Hugo 并行构建验证&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;访问与参考&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;代码仓库：&lt;a href=&#34;https://github.com/bigrh0917/bigrh0917.github.io&#34;&gt;bigrh0917.github.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;访问：&lt;a href=&#34;https://bigrh0917.github.io/&#34;&gt;limanshu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;更一步详细内容&#34;&gt;更一步详细内容&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;业务场景：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在个人技术品牌化需求增长的背景下，需快速构建一个高性能、高可用、SEO 友好的技展示页面，要求支持多终端访问、自动化部署，并具备可扩展性以承载未来流量增长&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;技术挑战&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;传统静态生成工具（如 Jekyll）构建速度慢，缺乏灵活的模块化能力&lt;/li&gt;
&lt;li&gt;手动部署流程繁琐，无法实现 CI/CD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;核心任务（Task）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计并实现一个&lt;strong&gt;企业级博客系统&lt;/strong&gt;，要求：
&lt;ul&gt;
&lt;li&gt;构建时间 ≤ 2秒（千篇文章规模）&lt;/li&gt;
&lt;li&gt;全站 Lighthouse 评分 ≥ 95&lt;/li&gt;
&lt;li&gt;实现 GitOps 驱动的自动化发布流程&lt;/li&gt;
&lt;li&gt;支持灰度发布、多环境隔离（dev/staging/prod）&lt;/li&gt;
&lt;li&gt;可以选择集成安全防护与监控告警能力&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;技术行动&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;架构设计与选型
&lt;ul&gt;
&lt;li&gt;采用 &lt;strong&gt;Hugo + GitHub 生态&lt;/strong&gt;作为核心架构，利用 Hugo 的 Golang 编译级速度（平均构建时间 0.8s/1000文章）替代传统方案（如 Gatsby 构建时间 25s+）&lt;/li&gt;
&lt;li&gt;使用 &lt;strong&gt;GitHub Actions 多工作流策略&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;主工作流：合并到 main 分支时触发生产环境构建&lt;/li&gt;
&lt;li&gt;独立工作流：PR 提交时触发 Lighthouse 自动化测试
&lt;ul&gt;
&lt;li&gt;通过 &lt;strong&gt;自动化质量门禁&lt;/strong&gt; 保障项目的技术标准&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lighthouse 自动化测试&lt;/strong&gt; 作为 PR 合并前的强制检查，确保每次变更都符合预设的技术指标（如性能 ≥ 90 分、SEO ≥ 100 分）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;性能优化&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现 Hugo 模板预编译（PartialCached），减少 40% 重复渲染开销&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;resources.PostProcess&lt;/code&gt; 集成 &lt;strong&gt;Subresource Integrity (SRI)&lt;/strong&gt;，增强静态资源安全性&lt;/li&gt;
&lt;li&gt;基于 GitHub Pages 的 CDN 边缘缓存，配置 &lt;code&gt;Cache-Control: max-age=31536000, immutable&lt;/code&gt; 对静态资源永久缓存&lt;/li&gt;
&lt;li&gt;可以选择使用 &lt;strong&gt;Cloudflare Workers&lt;/strong&gt; 实现动态 HTML 边缘缓存（TTL 10分钟）与 DDoS 防护&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;实践&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;actions/checkout@v4&lt;/code&gt; 实现多仓库同步（源码仓库与部署仓库分离）&lt;/li&gt;
&lt;li&gt;在 Actions 工作流中集成 &lt;strong&gt;Trivy 漏洞扫描&lt;/strong&gt;，阻断高风险依赖项的合并&lt;/li&gt;
&lt;li&gt;通过 &lt;strong&gt;Hugo 内联 CSP 策略&lt;/strong&gt;，禁止不安全脚本加载&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&#34;可能有用的参考资料&#34;&gt;可能有用的参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gohugoio/hugo&#34;&gt;Hugo&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://maverick.canhtran.me/&#34; title=&#34;https://maverick.canhtran.me/&#34;&gt;https://maverick.canhtran.me/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GitHub
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/actions&#34;&gt;GitHub Actions documentation - GitHub Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/actions/writing-workflows/quickstart&#34;&gt;Quickstart for GitHub Actions - GitHub Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;
&lt;br&gt;
&lt;h2 id=&#34;附件&#34;&gt;附件&lt;/h2&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;img
  src=&#34;https://bigrh0917.github.io/img/hugo1.png&#34;
  alt=&#34;&#34;
  loading=&#34;lazy&#34;
  decoding=&#34;async&#34;
  class=&#34;full-width&#34;
/&gt;

&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
            <author>author</author>
            <guid>https://bigrh0917.github.io/posts/bulit-blog-by-hugo-and-gitpage/</guid>
            <pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate>
        </item>
        
    </channel>
</rss>
